

- char	*get_next_line(int fd)
- fd = file descriptor => descripteur de fichier
- un descripteur de fichier est un entier
- Tout entier >2 correspond generalement a des fichiers
- la fonction get_next_line(int fd) => va donc s'appliquer sur sur le fichier pointe par la fonction

- int fd = open("monfichier.txt", O_RDONLY);
- open() ouvre le fichier

- declarer une variable char *buffer pour stocker ce que lis read() 
- la taille de ce buffer peut varier voila pourquoi on l'appelle de la maniere suivante : char buffer[BUFFER_SIZE]
- pas oublier de mettre un static en plus pour que la variable garde sa valeur entre les appels de la fonction => static char buffer[BUFFER_SIZE]
- taille maximal du buffer (memoir tampon) et des 1024 bytes/octets soit 1 mega byte/octet (dans ce cas de figure)

- ssize_t read(int fd, void *buf, size_t count)
- cette fonction va lire dans le fichier (int fd) et va ensuite copier count(size_t count) * caractere dans le buffer(void *buf) et return le nbr d'octetts lus (peut etre inferieur a count)
- si une erreur se produit dans read => return (-1)
- void *buf => pointeur vers un tampon dans lequel les donnees seront stocke
- la fonction read va servir à remplir de buffer d'autant de caractere qu'il a d'espace voila pourquoi count sera egal a la taille du buffer
- première idée pour la fonction read => read(fd, buffer, BUFFER_SIZE)

Questions :
- Est ce qu'il y a besoin de mallocer la mémoire du tampon pour être sur de ne pas avoir de problème ?
- Si le tampon est remplis lors de la première itération comment sera t il possible de faire une nouvelle itération et de mettre des caractère dans le buffer deja pleins ?
- La question précédente par du principe que la taille du buffer peut etre variable c'est a dire que le code doit aussi bien fonctionné avec une taille de 1024 octets qu'avec une taille de un octet.
Y aurait-il donc besoin d'une autre variable plus grande dans laquelle stocker le résultat de chaque itération ?

buffer :
- Puisqu'il est déclaré comme statique, sa mémoire est allouée au début de l'exécution du programme, et elle est réutilisée à chaque appel de la fonction get_next_line. 
- Il n'y a donc pas de risque de dépassement de mémoire, car le tampon reste toujours de taille fixe.
- Dans la plupart des cas, il est utile d'avoir une autre variable pour construire progressivement la ligne entière avant de la retourner, surtout si ta ligne est plus longue que la taille du buffer.
- Cependant cette nouvelle variable sera allouée dynamiquement (avec malloc).

Questions :
- Cette nouvelle variable comment connaître la taille à lui mallocer ?
- Comment déclarer cette nouvelle variable ?

- On ne sait jamais à l'avance la taille exacte de la ligne qui va être lus.
- Il faut donc allouer de la mémoire dynamiquement et, si nécessaire, réallouer plus de mémoire au fur et à mesure que l'on lis des morceaux de la ligne.
- La variable pour stocker la construction de la ligne sera déclaré de la manière suivante :
    => char *line = malloc(128)
- Ensuite en cas de manque d'espace dans cette variable on va agrandir cette mémoir avec realloc :
    => line = realloc(line, nouvelle_taille)
- realloc va permettre d'ajuster la mémoire au fur et à mesure que la ligne se construira.

Questions :
- Où déclarer la taille du buffer ? (BUFFER_SIZE)

- Préférable de déclarer la taille du buffer comme une constante globale.
- Il est donc préférable de déclarer cette constante dans le fichier .h .
- Visibilité : Le fichier d'en-tête est accessible par plusieurs fichiers .c, donc si tu déclares BUFFER_SIZE dans le fichier .h, tous les fichiers qui incluent cet en-tête pourront l'utiliser.
- Facilité de modification : Si tu veux changer la taille du buffer, tu n'auras qu'à modifier BUFFER_SIZE dans un seul endroit (le fichier .h), et cela sera répercuté dans tout ton projet.
- Cohérence : Cela garantit que la taille du buffer reste la même dans tout le projet.

Exemple :
#ifndef GET_NEXT_LINE_H
#define GET_NEXT_LINE_H

#ifndef BUFFER_SIZE
#define BUFFER_SIZE 32  // Tu définis une valeur par défaut si non définie
#endif

char *get_next_line(int fd);

#endif

Problème d'execution du programme :
=> zsh: abort      ./a.out
Le message zsh: abort ./a.out signifie que le programme s'est arrêté brusquement à cause d'une erreur grave. Ce genre d'arrêt est souvent dû à des erreurs de gestion de mémoire ou d'accès à des zones mémoire incorrectes (comme essayer de lire ou écrire là où on ne devrait pas).

Causes possibles et solutions simples
Accès mémoire invalide :
Cela arrive souvent lorsqu'on essaie d'accéder à une adresse mémoire non allouée ou libérée, ou si on dépasse la taille d'une zone mémoire.
Problèmes d'allocation de mémoire :
Si une allocation de mémoire (malloc) échoue et qu'on essaie quand même d'utiliser le pointeur non initialisé, le programme peut planter.


AGAIN : 

get_next_line() :
    - Déclarations des différentes variables
    - Vérification de 2 conditions pour le return (NULL) en cas d'erreur (OR)
            - Première condition => Regarde la fonction check_null() => return (faux = 0 ou vrai = 1)
            - Deuxième condition => Regarde la fonction read_and_store()
    - Mettre la line (avant \n) dans la dst
    - Sécurité pour la dst (lignes pas forcément utile car déja vérifiées)
    - temp = line est la pour libérée la mémoire de l'ancienne line proprement sans risquer de quelconque problème
    - La variable line est redéfinit pour enlever la ligne qui a déja été retourner
    - Condition si line contient encore des caractères après avoir sorti la première ligne du fichier, 
        alors on va copier (ft_strdup()) le reste des ces caractères après le \n (c'est pour ça line + 1)
            - On free la variable temp pour éviter une fuite de mémoire (sécurité)
            - S'il y a une erreur avec la nouvelle chaîne on return (NULL) => erreur mémoire
    - Sinon on free directement temp (pour les mêmes raisons) et on met la line à NULL (si la line est déja vide) 

    Résumé : Cette fonction est la fonction principale de ce projet.
    Elle a donc pour objectif de donner la ligne suivante du doc à chaque itération

check_null() :
    - Fonction qui prend le FileDesciptor et la line en variable
    - Vérifie dans sa première condition que fd et le BUFFER_SIZE ne sont pas sujet aux erreurs
    - Si oui return (1), sinon continue
    - Vérifie ensuite la line si elle n'est pas vide
    - Si oui on va mallocer un char pour y mettre le \0 afin de montrer une chaine sans caractère
    - Attention à toujours mettre la sécurité pour le malloc au cas ou se dernier fait de la M
    - Mettre un \0 à la fin de la string

    Résumé : 

read_and_store() :
    - Déclarations des différentes variables
    - Boucle tant que ft_condition() = 0
    - Initialisation de la variable count qui va utiliser la fonction read() pour connaître le nombre de caractère(bytes) dans le buffer
    - Condition si count <= 0 sont des cas particuliers pour lesquels on va sortir de la fonction bien avant la fin (break)
        - Condition si count = -1 (cas d'erreur) ou si il y a directement \0 (rien dans la ligne), alors on free et on return (NULL)
    - 

    Résumé : 

ft_condition() :
    - Déclarations des différentes variables
    - Initialisation de i à 0 (position dans la string)
    - Boucle qui va parcourir tous les caractères de la string
    - Condition si le caractère lu correspond au \n => return (1)
    - S'il n'y a rien de particulier la boucle va aller jusqu'au bout de la string et return (0)
    - 1 => valeur trouvée OU 0 => valeur non-trouvée

    Résumé : La fonction cherche un \n et return un size_t, 1 si elle a trouvé sinon 0

ft_put_line() :
    - Déclarations des différentes variables
    - Initialisation de i à 0
    - Boucle qui va incrémenter i si la string n'est pas finie ou si elle ne tombe pas sur un \n
    - Size va donc prendre la valeur final de i + 1 (car on garde assez de place pour le \0)
    - Condition si si la string à la position i possède un \n, alors size++ pour prévoir l'espace pour le \n dans dst
    - Malloc de la dst avec size qui prend en compte le \0 et le \n
    - Sécurité pour le malloc
    - Remettre i à 0 pour pouvoir réutiliser la variable (pas besoin d'une nouvelle variable)
    - Boucle poour mettre les caractères de la line (string donnée) dans la dst
    - Les conditions sont les même qu'avant dans le boucle pour ne pas mettre plus ou moins dans la dst
    - Condition si on trouve un \n, alors on le rajoute ensuire à la dst
    - On met un \0 à la fin de la string
    - Return(dst)

    Résumé : La fonction va copier les caractères de la line jusqu'au \n dans la dst (string)

Bonus : 
    - 
    - 
